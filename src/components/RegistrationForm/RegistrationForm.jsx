import { useDispatch } from 'react-redux';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import { register } from '../../redux/auth/operations';
import styles from './RegistrationForm.module.css';
import { toast } from 'react-hot-toast'; 

const RegistrationSchema = Yup.object().shape({
  name: Yup.string()
    .min(2, '–Ü–º º—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏')
    .required('–û–±–æ–≤ º—è–∑–∫–æ–≤–æ'),
  email: Yup.string()
    .email('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email')
    .required('–û–±–æ–≤ º—è–∑–∫–æ–≤–æ'),
  password: Yup.string()
    .min(6, '–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤')
    .required('–û–±–æ–≤ º—è–∑–∫–æ–≤–æ'),
});

export default function RegistrationForm() {
  const dispatch = useDispatch();

  const handleSubmit = async (values, actions) => {
  try {
    await dispatch(register(values)).unwrap(); 
    actions.resetForm();
    toast.success('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! üéâ');
      
  } catch (error) {
    let errorMessage = "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.";

    if (error?.response?.status === 400) {
      errorMessage = "–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.";
    } else if (error?.response?.status === 409) {
      errorMessage = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î.";
    }

    actions.setStatus({ message: errorMessage });
  }
};


  return (
    <div className={styles.wrapper}>
      <h2 className={styles.title}>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</h2>

      <Formik
        initialValues={{ name: '', email: '', password: '' }}
        validationSchema={RegistrationSchema}
        onSubmit={handleSubmit}
      >
        {({ status }) => ( // –î–æ–¥–∞—î–º–æ status —Ç—É—Ç!
          <Form className={styles.form} autoComplete="off">
            <label className={styles.label}>
              –Ü–º'—è
              <Field name="name" type="text" className={styles.input} autoComplete="new-name"/>
              <ErrorMessage name="name" component="div" className={styles.error} />
            </label>

            <label className={styles.label}>
              Email
              <Field name="email" type="email" className={styles.input} autoComplete="new-email"/>
              <ErrorMessage name="email" component="div" className={styles.error} />
            </label>

            <label className={styles.label}>
              –ü–∞—Ä–æ–ª—å
              <Field name="password" type="password" className={styles.input} autoComplete="new-password"/>
              <ErrorMessage name="password" component="div" className={styles.error} />
            </label>

            {/* –í–∏–≤–æ–¥–∏–º–æ –ø–æ–º–∏–ª–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–∞ */}
            {status && status.message && (
              <div className={styles.serverError}>{status.message}</div>
            )}

            <button type="submit" className={styles.button}>
              –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è
            </button>
          </Form>
        )}
      </Formik>
    </div>
  );
}
