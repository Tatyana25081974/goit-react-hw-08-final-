import { useDispatch, useSelector } from 'react-redux';
import { addContact } from '../../redux/contacts/operations';
import { selectContacts } from '../../redux/contacts/selectors';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import { toast } from 'react-hot-toast'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ toast –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
import styles from './ContactForm.module.css';

export default function ContactForm() {
  const dispatch = useDispatch();
  const contacts = useSelector(selectContacts);

  const handleSubmit = async (values, { resetForm }) => {
    const { name, number } = values;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –≤–∂–µ —ñ—Å–Ω—É—î
    const isExist = contacts.some(
      contact => contact.name.toLowerCase() === name.toLowerCase()
    );

    if (isExist) {
      toast.error(`${name} –≤–∂–µ —î —É –≤–∞—à—ñ–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ñ–π –∫–Ω–∏–∑—ñ.`); 
      return;
    }

    try {
      await dispatch(addContact({ name, number })).unwrap(); // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
      toast.success('–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ! üìí'); 
      resetForm(); // –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º—É
    } catch  {
      toast.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.'); 
    }
  };

  const validationSchema = Yup.object({
    name: Yup.string()
      .min(2, "–Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏")
      .max(30, "–Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª—ñ–≤")
      .required("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è"),

    number: Yup.string()
      .matches(
        /^\+\(\d{3}\)\d{3}-\d{2}-\d{2}$/,
        "–§–æ—Ä–º–∞—Ç –º–∞—î –±—É—Ç–∏ +(XXX)XXX-XX-XX"
      )
      .required('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ'),
  });

  return (
    <div className={styles.wrapper}>
      <h2 className={styles.title}>–î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç</h2>

      <Formik
        initialValues={{ name: '', number: '' }}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        <Form className={styles.form}>
          <label className={styles.label}>
            –Ü–º'—è
            <Field name="name" type="text" className={styles.input} />
            <ErrorMessage name="name" component="div" className={styles.error} />
          </label>

          <label className={styles.label}>
            –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
            <Field name="number" type="tel" className={styles.input} />
            <ErrorMessage name="number" component="div" className={styles.error} />
          </label>

          <button type="submit" className={styles.button}>–î–æ–¥–∞—Ç–∏</button>
        </Form>
      </Formik>
    </div>
  );
}
